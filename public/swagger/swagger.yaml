openapi: 3.0.1
info:
  title: Prueba Técnica
  description: >-
    In this sample you can use the api key `nLTzEBs664uEALxL8dYf1ao9z4vgl8TMlBaatZ2LUF8jEM9m9t` to test the
    authorization filters while the first user admin exists.
  contact:
    email: jose.quilca@pucp.edu.pe
  version: 1.0.0
servers:
  - url: 'http://localhost:8202/api/v1.0'
tags:
  - name: user
    description: Servicio CRUD de usuarios
  - name: auth
    description: Servicio de autenticación y autorización
paths:
  /users:
    get:
      tags:
        - user
      summary: List all users
      operationId: lisUsers
      security:
        - api_key: []
      responses:
        200:
          description: successful operation
          
    post:
      tags:
        - user
      summary: Create user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      security:
        - api_key: []
  /users/{userId}:
    get:
      tags:
      - user
      summary: Find user by ID
      description: Returns a single user
      operationId: getuserById
      parameters:
      - name: userId
        in: path
        description: ID of user to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: user not found
          content: {}
      security:
      - api_key: []
    put:
      tags:
      - user
      summary: Updates a user with new list of projects
      operationId: updateuserWithForm
      parameters:
      - name: userId
        in: path
        description: ID of user that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                projects:
                  type: object
                  description: New list of all projects of the users
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - api_key: []
    delete:
      tags:
      - user
      summary: Deletes a user
      operationId: deleteuser
      parameters:
      - name: userId
        in: path
        description: user id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: user not found
          content: {}
      security:
      - api_key: []
      
  
  /login:
    post:
      tags:
        - auth
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  description: Email of the user
                password:
                  type: string
                  description: Password of the user
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        '500':
          description: Invalid username/password supplied
          content: {}
  /logout:
    post:
      tags:
        - auth
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
      security:
      - api_key: []
  /authorization:
    get:
      tags:
      - auth
      summary: List all permission of a logged user
      operationId: authorizationList
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  data:
                   type: array
      security:
      - api_key: []
  /authorization/{action}:
    get:
      tags:
      - auth
      summary: Check if a logged user has a specific permission over a specific role
      operationId: authorizationCheck
      parameters:
      - name: action
        in: path
        description: action in format "ability:role"
        required: true
        schema:
          type: string
          example: "update:developer"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  data:
                   type: array
      security:
      - api_key: []
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique Identifier of the User
        name:
          type: string
          description: Name of the User
        email:
          type: string
          description: Unique email address of the User
        role:
          type: string
          description: Role of the user (manager, scrum_master, developer)
        password:
          type: string
          description: Dummy password of the User
        api_token:
          type: string
          description: Token to authenticate this user
    Project:
      type: object
      properties:
        id:
         type: integer
         format: int64
         description: Unique Identifier of the Project
        code:
         type: string
         description: Unique name identifier of the Project
        summary:
          type: string
          description: Summary about the Project
        type:
          type: string
          description: Type of project 
        name:
          type: string
          description: Short name of the Project
          
  securitySchemes:
    api_key:
      type: apiKey
      name: api_token
      in: query
